{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","App","onClick","_callee","event","form","regenerator_default","a","wrap","_context","prev","next","preventDefault","target","console","log","elements","originalUrl","value","shortBaseUrl","post","sent","stop","react_default","createElement","className","Form_default","onSubmit","this","Group","controlId","Label","Control","ref","type","placeholder","Text","Button_default","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCMlCC,EAAQC,EAAQ,IA+CPC,6MAnBbC,8CAAU,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAIRP,EAAMQ,iBAEAP,EAAOD,EAAMS,OACnBC,QAAQC,IAAIV,EAAKW,UACjBF,QAAQC,IAAIV,EAAKW,SAASC,YAAYC,OACtCJ,QAAQC,IAAIV,EAAKW,SAASG,aAAaD,OAT/BT,EAAAE,KAAA,EAWUZ,EAAMqB,KAAN,WAAuB,CACvCH,YAAaZ,EAAKW,SAASC,YAAYC,MACvCC,aAAcd,EAAKW,SAASG,aAAaD,QAbnC,OAAAT,EAAAY,KAAA,wBAAAZ,EAAAa,SAAAnB,oIAxBR,OACEoB,EAAAhB,EAAAiB,cAAA,OAAKC,UAAU,OACbF,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAD,CAAMoB,SAAUC,KAAK1B,SACnBqB,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAKsB,MAAN,CAAYC,UAAU,eACpBP,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAKwB,MAAN,qBACAR,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAKyB,QAAN,CAAcC,IAAI,cAAcC,KAAK,SAASC,YAAY,kBAI5DZ,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAKsB,MAAN,CAAYC,UAAU,gBACpBP,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAKwB,MAAN,+BACAR,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAKyB,QAAN,CAAcC,IAAI,eAAeC,KAAK,SAASC,YAAY,mBAC3DZ,EAAAhB,EAAAiB,cAACE,EAAAnB,EAAK6B,KAAN,CAAWX,UAAU,cAArB,mEAIFF,EAAAhB,EAAAiB,cAACa,EAAA9B,EAAD,CAAQ+B,QAAQ,UAAUJ,KAAK,UAA/B,mBAlBQK,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAhB,EAAAiB,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf534e2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nconst axios = require('axios');\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <Form onSubmit={this.onClick}>\n          <Form.Group controlId=\"originalUrl\">\n            <Form.Label>Original URL</Form.Label>\n            <Form.Control ref=\"originalUrl\" type=\"string\" placeholder=\"Original URL\" />\n            \n          </Form.Group>\n  \n          <Form.Group controlId=\"shortBaseUrl\">\n            <Form.Label>Enter short URL prefix</Form.Label>\n            <Form.Control ref='shortBaseUrl' type=\"string\" placeholder=\"Short Base URL\" />\n            <Form.Text className=\"text-muted\">\n              This is the base url that will be used to build the short url.\n            </Form.Text>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n\n  onClick = async (event) => {\n    /// console.log(\"Button Clicked\");\n\n    /// prevent default prevents the page from reloading automatically \n    event.preventDefault(); \n\n    const form = event.target;\n    console.log(form.elements)\n    console.log(form.elements.originalUrl.value)\n    console.log(form.elements.shortBaseUrl.value)\n\n    const res = await axios.post(`/api/url`, {\n      originalUrl: form.elements.originalUrl.value,\n      shortBaseUrl: form.elements.shortBaseUrl.value,\n    })\n\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}